"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
const zod_to_json_schema_1 = require("zod-to-json-schema");
const navigateSchema = zod_1.z.object({
    url: zod_1.z.string().describe('The URL to navigate to'),
});
const navigate = captureSnapshot => ({
    capability: 'core',
    schema: {
        name: 'browser_navigate',
        description: 'Navigate to a URL',
        inputSchema: (0, zod_to_json_schema_1.zodToJsonSchema)(navigateSchema),
    },
    handle: async (context, params) => {
        const validatedParams = navigateSchema.parse(params);
        const currentTab = await context.ensureTab();
        return await currentTab.run(async (tab) => {
            await tab.navigate(validatedParams.url);
            const code = [
                `// Navigate to ${validatedParams.url}`,
                `await page.goto('${validatedParams.url}');`,
            ];
            return { code };
        }, {
            captureSnapshot,
        });
    },
});
const goBackSchema = zod_1.z.object({});
const goBack = snapshot => ({
    capability: 'history',
    schema: {
        name: 'browser_navigate_back',
        description: 'Go back to the previous page',
        inputSchema: (0, zod_to_json_schema_1.zodToJsonSchema)(goBackSchema),
    },
    handle: async (context) => {
        return await context.currentTab().runAndWait(async (tab) => {
            await tab.page.goBack();
            const code = [
                `// Navigate back`,
                `await page.goBack();`,
            ];
            return { code };
        }, {
            captureSnapshot: snapshot,
        });
    },
});
const goForwardSchema = zod_1.z.object({});
const goForward = snapshot => ({
    capability: 'history',
    schema: {
        name: 'browser_navigate_forward',
        description: 'Go forward to the next page',
        inputSchema: (0, zod_to_json_schema_1.zodToJsonSchema)(goForwardSchema),
    },
    handle: async (context) => {
        return await context.currentTab().runAndWait(async (tab) => {
            await tab.page.goForward();
            const code = [
                `// Navigate forward`,
                `await page.goForward();`,
            ];
            return { code };
        }, {
            captureSnapshot: snapshot,
        });
    },
});
exports.default = (captureSnapshot) => [
    navigate(captureSnapshot),
    goBack(captureSnapshot),
    goForward(captureSnapshot),
];

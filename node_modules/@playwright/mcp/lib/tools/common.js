"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
const zod_to_json_schema_1 = require("zod-to-json-schema");
const waitSchema = zod_1.z.object({
    time: zod_1.z.number().describe('The time to wait in seconds'),
});
const wait = {
    capability: 'wait',
    schema: {
        name: 'browser_wait',
        description: 'Wait for a specified time in seconds',
        inputSchema: (0, zod_to_json_schema_1.zodToJsonSchema)(waitSchema),
    },
    handle: async (context, params) => {
        const validatedParams = waitSchema.parse(params);
        await new Promise(f => setTimeout(f, Math.min(10000, validatedParams.time * 1000)));
        return {
            content: [{
                    type: 'text',
                    text: `Waited for ${validatedParams.time} seconds`,
                }],
        };
    },
};
const closeSchema = zod_1.z.object({});
const close = {
    capability: 'core',
    schema: {
        name: 'browser_close',
        description: 'Close the page',
        inputSchema: (0, zod_to_json_schema_1.zodToJsonSchema)(closeSchema),
    },
    handle: async (context) => {
        await context.close();
        return {
            content: [{
                    type: 'text',
                    text: `Page closed`,
                }],
        };
    },
};
const resizeSchema = zod_1.z.object({
    width: zod_1.z.number().describe('Width of the browser window'),
    height: zod_1.z.number().describe('Height of the browser window'),
});
const resize = captureSnapshot => ({
    capability: 'core',
    schema: {
        name: 'browser_resize',
        description: 'Resize the browser window',
        inputSchema: (0, zod_to_json_schema_1.zodToJsonSchema)(resizeSchema),
    },
    handle: async (context, params) => {
        const validatedParams = resizeSchema.parse(params);
        const tab = context.currentTab();
        return await tab.run(async (tab) => {
            await tab.page.setViewportSize({ width: validatedParams.width, height: validatedParams.height });
            const code = [
                `// Resize browser window to ${validatedParams.width}x${validatedParams.height}`,
                `await page.setViewportSize({ width: ${validatedParams.width}, height: ${validatedParams.height} });`
            ];
            return { code };
        }, {
            captureSnapshot,
        });
    },
});
exports.default = (captureSnapshot) => [
    close,
    wait,
    resize(captureSnapshot)
];
